{"version":3,"sources":["serviceWorker.js","components/Hed.jsx","components/Logo.jsx","components/Scene.jsx","components/Lights.jsx","components/Camera.jsx","Home.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Text","children","vAlign","hAlign","size","props","color","font","useLoader","THREE","config","useMemo","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","meshRef","useUpdate","self","geometry","computeBoundingBox","boundingBox","getSize","position","x","y","scale","ref","castShadow","attach","args","Hed","hedRef","useRef","checkWindow","thisObject","thisScale","innerHeight","document","documentElement","clientHeight","body","innerWidth","clientWidth","screen","orientation","type","z","LogoMesh","meshScaleFactor","extrudeSettings","steps","depth","extrudeDir","id","receiveShadow","wireframe","depthWrite","transparent","opacity","fillOpacity","shape","LogoShape","paths","SVGLoader","url","shapes","flatMap","thisPath","i","toShapes","map","fillColor","nodeID","userData","node","logoShape_Ref","useEffect","bBox","Box3","setFromObject","current","bSize","Vector3","xOffset","yOffset","forEach","item","timeoutId","resizeListener","clearTimeout","setTimeout","addEventListener","removeEventListener","useFrame","rotation","uuid","Logo","remoteGitImageLoc","Scene","GroundPlane","side","DoubleSide","metalness","BackDrop","Lights","KeyLight","brightness","width","intensity","lookAt","penumbra","FillLight","RimLight","ShadowLight","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-near","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","Camera","cameraRef","setDefaultCamera","useThree","Home","scene","shadowMap","fallback","fov","App","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c785d0b8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// #region ==================== IMPORTS ====================\n\nimport React, { useRef, useMemo } from 'react';\n\nimport * as THREE from 'three';\nimport { useLoader, useUpdate } from 'react-three-fiber';\n\n// #endregion ==================== IMPORTS ====================\n\n\n// #region ==================== FUNCTION: Text - REF: https://spectrum.chat/react-three-fiber/general/best-way-to-render-text~8597ed37-45e2-4d9a-998d-7351ad5b08ef ====================\n\nfunction Text({ children, vAlign = 'center', hAlign = 'center', size = 1, color = '#0000ff', ...props }) {\n\n    const font = useLoader(THREE.FontLoader, 'https://raw.githubusercontent.com/shigimcp/threejs-experiment-01/main/src/.github/fonts/ChaleParNinSix.json')\n\n    const config = useMemo(\n        () => ({ font, size: 1, height: 0.125, curveSegments: 10, bevelEnabled: true, bevelThickness: 0, bevelSize: 0, bevelOffset: 0, bevelSegments: 0 }),\n        [font]\n    )\n\n    const meshRef = useUpdate(\n\n        self => {\n            const size = new THREE.Vector3()\n            self.geometry.computeBoundingBox()\n            self.geometry.boundingBox.getSize(size)\n            self.position.x = hAlign === 'center' ? -size.x / 2 : hAlign === 'right' ? 0 : -size.x\n            self.position.y = vAlign === 'center' ? -size.y / 2 : vAlign === 'top' ? 0 : -size.y\n        },\n\n        [children]\n    )\n\n\n    return (\n        <group {...props} scale={[0.1 * size, 0.1 * size, 0.1]}>\n            <mesh ref={meshRef} castShadow>\n                <textGeometry attach=\"geometry\" args={[children, config]} />\n                <meshStandardMaterial attach=\"material\" color=\"#000066\" />\n                {/* <meshPhongMaterial attach=\"material\" color=\"#0000ff\" /> */}\n            </mesh>\n        </group>\n    )\n}\n\n// #endregion ==================== FUNCTION: Text - REF: https://spectrum.chat/react-three-fiber/general/best-way-to-render-text~8597ed37-45e2-4d9a-998d-7351ad5b08ef ====================\n\n\nexport default function Hed() {\n\n    const hedRef = useRef()\n\n    return (\n        <group ref={hedRef}>\n            <Text hAlign=\"left\" position={[0.7625, 1.5, -4]} children=\"Shigeru McPherson\" size={5} />\n            <Text hAlign=\"left\" position={[0, 0.8125, -4]} children=\"digital designer • art director\" size={3} />\n        </group>\n    )\n}\n","// #region ==================== IMPORTS ====================\n\nimport React from 'react';\n// import { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useRef, useMemo } from 'react';\n\n// import { DoubleSide } from \"three\";\n// import { Box3, Sphere, Vector3 } from \"three\";\nimport { Box3, Vector3 } from \"three\";\n\nimport { useLoader } from 'react-three-fiber';\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader';\nimport { useFrame } from 'react-three-fiber';\n\n// #endregion ==================== IMPORTS ====================\n\n\n\n// #region ==================== CONSTANTS / VARS ====================\n\n// const localLoc = '../images/';\nconst remoteGitImageLoc = 'https://raw.githubusercontent.com/shigimcp/threejs-experiment-01/main/src/.github/images/';\n\n// const meshScaleFactor = 0.05;\n// let meshScaleFactor;\n// const meshColor = \"#0000ff\";\n\nconst getWidth = () => window.innerWidth\n    || document.documentElement.clientWidth\n    || document.body.clientWidth;\n\nconst getHeight = () => window.innerHeight\n    || document.documentElement.clientHeight\n    || document.body.clientHeight;\n\n// #endregion ==================== CONSTANTS / VARS ====================\n\n\n\n// #region ==================== RESPONSIVE: meshScaleFactor (dirty soln) ====================\n\n// #region -------------------- RESPONSIVE: INIT - meshScaleFactor (dirty soln) --------------------\n\n// // console.log('');\n// // console.log('getWidth() = ' + getWidth() + '     getHeight() = ' + getHeight());\n\n// // console.log('window.screen.orientation = ' + window.screen.orientation);\n// // console.log('window.screen.orientation =');\n// // console.log(window.screen.orientation);\n\n// // console.log('document.body.clientWidth = ' + document.body.clientWidth);\n\n// // if (getWidth() > 768) {\n// // if (getWidth() > 768 && getHeight() < getWidth()) {\n// // if (window.screen.orientation.type === 'landscape-primary') {\n// if (getHeight() < getWidth() || window.screen.orientation.type === 'landscape-primary') {\n// // if ((getWidth() > 768 && getHeight() < getWidth()) || window.screen.orientation.type === 'landscape-primary') {\n\n//     // console.log(window.screen.orientation.type);\n//     console.log('orienttion = landscape');\n\n//     meshScaleFactor = 0.05;\n\n// } else {\n\n//     // console.log(window.screen.orientation.type);\n//     console.log('orienttion = portrait');\n\n//     meshScaleFactor = 0.025;\n// }\n\n// #endregion -------------------- RESPONSIVE: INIT - meshScaleFactor (dirty soln) --------------------\n\n\n// #region -------------------- RESPONSIVE: WINDOW RESIZE - meshScaleFactor (dirty soln) --------------------\n\n// window.addEventListener('resize', () => {\n\n\n//     // console.log('');\n//     // console.log('window.screen.orientation.type = ' + window.screen.orientation.type);\n//     // console.log('window.screen.orientation.type =');\n//     // console.log(window.screen.orientation.type);\n\n//     // console.log('document.body.clientWidth = ' + document.body.clientWidth);\n\n//     // this.setState({ windowWidth: document.body.clientWidth })\n\n    // // if (getWidth() > 768) {\n    // // if (getWidth() > 768 && getHeight() < getWidth()) {\n    // // if (window.screen.orientation.type === 'landscape-primary') {\n    // if (getHeight() < getWidth() || window.screen.orientation.type === 'landscape-primary') {\n    // // if ((getWidth() > 768 && getHeight() < getWidth()) || window.screen.orientation.type === 'landscape-primary') {\n\n    //     // console.log(window.screen.orientation.type);\n    //     console.log('orienttion = landscape');\n\n    //     meshScaleFactor = 0.05;\n\n    // } else {\n\n    //     // console.log(window.screen.orientation.type);\n    //     console.log('orienttion = portrait');\n\n    //     meshScaleFactor = 0.025;\n    // }\n// });\n\n// #endregion -------------------- RESPONSIVE: WINDOW RESIZE - meshScaleFactor (dirty soln) --------------------\n\n// #endregion ==================== RESPONSIVE: meshScaleFactor (dirty soln) ====================\n\n\n\n// #region ==================== FUNCTIONS ====================\n\n// #region -------------------- FUNCTION: checkWindow(thisObject) --------------------\n\nfunction checkWindow(thisObject) {\n\n    // console.log('');\n    // console.log('-------------------- FUNCTION: checkWindow(thisObject) --------------------');\n    // // console.log('thisObject = ' + thisObject);\n    // console.log('thisObject = ');\n    // console.log(thisObject);\n\n\n    let thisScale;\n\n    if (getHeight() < getWidth() || window.screen.orientation.type === 'landscape-primary') {\n\n        // console.log(window.screen.orientation.type);\n        // console.log('orienttion = landscape');\n\n        thisScale = 1;\n\n    } else {\n\n        // console.log(window.screen.orientation.type);\n        // console.log('orienttion = portrait');\n\n        thisScale = 0.45;\n    }\n\n    thisObject.scale.x = thisScale;\n    thisObject.scale.y = thisScale;\n    thisObject.scale.z = thisScale;\n}\n\n// #endregion -------------------- FUNCTION: checkWindow(thisObject) --------------------\n\n// #endregion ==================== FUNCTIONS ====================\n\n\n\n// #region ==================== LOGOMESH: EXTRUDE - REF: https://spectrum.chat/react-three-fiber/general/hole-from-imported-svg-is-reversing-should-be-a-donut-instead-is-a-dot~d235bb19-8d5c-4c4b-af74-faae8484204f ====================\n\nfunction LogoMesh(props) {\n\n    const meshScaleFactor = 0.05;\n    // const meshScaleFactor = 1;\n    const meshColor = \"#0000ff\";\n\n\n    // #region -------------------- LOGOMESH extrudeSettings - REF: https://threejs.org/docs/#api/en/geometries/ExtrudeGeometry --------------------\n\n    let extrudeSettings = {\n        curveSegments: 7,\n        steps: 1,\n        depth: 5,\n        bevelEnabled: false,\n\n        // curveSegments: 7,\n        // steps: 2,\n        // depth: 25,\n        // bevelEnabled: true, \n        // bevelThickness: 5,\n        // bevelSize: 5,\n        // bevelOffset: 0,\n        // bevelSegments: 5, \n    };\n\n\n    if (props.extrudeDir === 'negative') {\n        extrudeSettings.depth = extrudeSettings.depth * -1;\n    };\n\n    // #endregion -------------------- LOGOMESH extrudeSettings - REF: https://threejs.org/docs/#api/en/geometries/ExtrudeGeometry --------------------\n\n\n    return (\n        <mesh id={props.id} scale={[meshScaleFactor, -meshScaleFactor, meshScaleFactor]} castShadow receiveShadow>\n            <meshNormalMaterial attach=\"material\" color={meshColor} wireframe={true} depthWrite={true} transparent opacity={props.fillOpacity} />\n            <extrudeBufferGeometry attach=\"geometry\" args={[[props.shape], extrudeSettings]} />\n        </mesh>\n    );\n}\n\n// #endregion ==================== LOGOMESH: EXTRUDE - REF: https://spectrum.chat/react-three-fiber/general/hole-from-imported-svg-is-reversing-should-be-a-donut-instead-is-a-dot~d235bb19-8d5c-4c4b-af74-faae8484204f ====================\n\n\n\n// #region ==================== LOGOSHAPE: SVG - REF: https://codesandbox.io/s/react-three-fiber-react-spring-svg-parallax-forked-8hdg1 ====================\n\n// const logoShape_Ref = React.createRef();\n\n\nfunction LogoShape(props) {\n// const LogoShape = React.forwardRef((props, logoShape_Ref) => {\n\n\n    // #region -------------------- LOGOSHAPE shapes --------------------\n\n    const { paths } = useLoader(SVGLoader, props.url)\n\n    const shapes = useMemo(() =>\n        paths.flatMap((thisPath, i) =>\n            thisPath.toShapes(true).map((shape) =>\n                ({ shape, color: props.fillColor, fillOpacity: props.fillOpacity, extrudeDir: props.extrudeDir, nodeID: thisPath.userData.node.id })\n            )\n        ), [paths, props]\n    );\n\n    // #endregion -------------------- LOGOSHAPE shapes --------------------\n\n\n    const logoShape_Ref = useRef();\n\n    // #region -------------------- LOGOSHAPE center - REF: https://muffinman.io/three-js-extrude-svg-path/ --------------------\n\n    useEffect(() => {\n\n        // #region - - - - - - - - - - - LOGOSHAPE useEffect: center - REF: https://muffinman.io/three-js-extrude-svg-path/ - - - - - - - - - - -\n\n        let bBox = new Box3().setFromObject(logoShape_Ref.current);\n        let bSize = new Vector3();\n\n        // bBox.setFromObject(logoShape_Ref.current);\n        bBox.getSize(bSize);\n\n\n        // console.log(logoShape_Ref.current.children);\n        // console.log(bBox);\n        // console.log(bSize);\n        // // console.log(bBox.getSize(bSize));\n\n\n        let xOffset = bSize.x * -0.5;\n        let yOffset = bSize.y * 0.5;\n\n        logoShape_Ref.current.children.forEach(item => {\n            item.position.x = xOffset;\n            item.position.y = yOffset;\n        })\n\n        // #endregion - - - - - - - - - - - LOGOSHAPE useEffect: center - REF: https://muffinman.io/three-js-extrude-svg-path/ - - - - - - - - - - -\n\n\n        checkWindow(logoShape_Ref.current);\n\n\n        // #region - - - - - - - - - - - LOGOSHAPE useEffect: RESPONSIVE: WINDOW RESIZE - resizeListener - - - - - - - - - - -\n\n        let timeoutId = null;\n\n        const resizeListener = () => {\n\n            // console.log('');\n            // console.log('- - - - - - - - - - - LOGOSHAPE useEffect: RESPONSIVE: WINDOW RESIZE - resizeListener - - - - - - - - - - -');\n            // console.log('logoShape_Ref.current.scale = ');\n            // console.log(logoShape_Ref.current.scale);\n            // console.log(logoShape_Ref.current);\n\n\n            // prevent execution of previous setTimeout\n            clearTimeout(timeoutId);\n\n            timeoutId = setTimeout(() => checkWindow(logoShape_Ref.current))\n        }\n\n        window.addEventListener('resize', resizeListener);\n\n        return () => {\n            window.removeEventListener('resize', resizeListener);\n        }\n\n        // #endregion - - - - - - - - - - - LOGOSHAPE useEffect: RESPONSIVE: WINDOW RESIZE - resizeListener - - - - - - - - - - -\n\n\n    }, []);\n\n    // #endregion -------------------- LOGOSHAPE center - REF: https://muffinman.io/three-js-extrude-svg-path/ --------------------\n\n\n    // #region -------------------- LOGOSHAPE spin --------------------\n\n    // const logoShape_Ref = useRef()\n\n    useFrame(() => {\n        logoShape_Ref.current.rotation.y += 0.025;\n    });\n\n    // #endregion -------------------- LOGOSHAPE spin --------------------\n\n\n    return (\n        <group ref={logoShape_Ref}>\n            {shapes.map((props) => (\n                <LogoMesh key={props.shape.uuid} {...props} />\n            ))}\n        </group>\n    )\n};\n\n//     );\n// }, [logoShape_Ref]);\n\n// #endregion ==================== LOGOSHAPE: SVG - REF: https://codesandbox.io/s/react-three-fiber-react-spring-svg-parallax-forked-8hdg1 ====================\n\n\nexport default function Logo() {\n\n    // const logoSVG = remoteGitImageLoc + 'logo/shigeru_logo_extrude_clean_sm.svg';\n    // const logoSVG = remoteGitImageLoc + 'logo/shigeru_logo_extrude02_stroke.svg';\n    const logoSVG = remoteGitImageLoc + 'logo/shigeru_logo_extrude_stroke.svg';\n\n\n    return (\n        // <LogoShape id=\"logoSVGid\" url={logoSVG} fillOpacity=\"0.25\" extrudeDir=\"positive\" ref={logoShape_Ref} />\n        <LogoShape id=\"logoSVGid\" url={logoSVG} fillOpacity=\"0.25\" extrudeDir=\"positive\" />\n    );\n}\n","// #region ==================== IMPORTS ====================\n\nimport React from 'react';\n// import { Suspense } from 'react';\n// import { useRef } from 'react';\n// import { useState } from 'react';\n// import { useEffect } from 'react';\n// import { useFrame } from 'react';\n\nimport { DoubleSide } from \"three\";\n\n// import { gsap } from 'gsap';\n\n// import Text from './Text';\n\nimport Hed from \"./Hed\";\nimport Logo from \"./Logo\";\n// import Cubes from \"./Cubes\";\n\n// #endregion ==================== IMPORTS ====================\n\n\n\n// export default () => {\nexport default function Scene() {\n\n    // console.log('');\n    // console.log('====================  export default function Scene()  ====================');\n\n    // #region ==================== SCENE - REF: https://codeworkshop.dev/blog/2019-12-31-learn-the-basics-of-react-three-fiber-by-building-a-three-point-lighting-setup/ ====================\n\n    // #region -------------------- GROUNDPLANE --------------------\n\n    function GroundPlane() {\n        return (\n            <mesh rotation={[5, 0, 0]} position={[0, -5, 0]} receiveShadow>\n                <planeBufferGeometry attach=\"geometry\" args={[500, 500]} />\n                <meshStandardMaterial attach=\"material\" color=\"white\" side={DoubleSide} metalness={0.4} />\n                {/* <meshPhongMaterial attach=\"material\" color=\"white\" side={DoubleSide} metalness={0.4} /> */}\n            </mesh>\n        );\n    }\n\n    // #endregion -------------------- GROUNDPLANE --------------------\n\n\n    // #region -------------------- BACKDROP --------------------\n\n    function BackDrop() {\n\n        return (\n            <mesh position={[0, -1, -5]} receiveShadow>\n                <planeBufferGeometry attach=\"geometry\" args={[500, 500]} />\n                <meshStandardMaterial attach=\"material\" color=\"white\" side={DoubleSide} metalness={0.4} />\n                {/* <meshPhongMaterial attach=\"material\" color=\"white\" side={DoubleSide} metalness={0.4} /> */}\n            </mesh>\n        );\n    }\n\n    // #endregion -------------------- BACKDROP --------------------\n\n    // #endregion ==================== SCENE - REF: https://codeworkshop.dev/blog/2019-12-31-learn-the-basics-of-react-three-fiber-by-building-a-three-point-lighting-setup/ ====================\n\n\n    return (\n        <group>\n            {/* <group ref={scene_Ref}> */}\n            <Hed />\n            <Logo />\n            {/* <Logo nodeID='thisLogo' /> */}\n            {/* <Cubes /> */}\n            <BackDrop />\n            <GroundPlane />\n        </group>\n    );\n}\n","// #region ==================== IMPORTS ====================\n\nimport React from \"react\";\n\n// #endregion ==================== IMPORTS ====================\n\n\n\n// export default () => {\nexport default function Lights(props) {\n\n    // #region ==================== LIGHTS - REF: https://codeworkshop.dev/blog/2019-12-31-learn-the-basics-of-react-three-fiber-by-building-a-three-point-lighting-setup/ ====================\n\n    // #region -------------------- LIGHTS: KeyLight --------------------\n\n    function KeyLight({ brightness, color }) {\n        return (\n            <rectAreaLight\n                width={3}\n                height={3}\n                color={color}\n                intensity={brightness}\n                position={[-2, 0, 5]}\n                lookAt={[0, 0, 0]}\n                penumbra={1}\n            />\n        );\n    }\n\n    // #endregion -------------------- LIGHTS: KeyLight --------------------\n\n\n    // #region -------------------- LIGHTS: FillLight --------------------\n\n    function FillLight({ brightness, color }) {\n        return (\n            <rectAreaLight\n                width={3}\n                height={3}\n                intensity={brightness}\n                color={color}\n                position={[2, 1, 4]}\n                lookAt={[0, 0, 0]}\n                penumbra={2}\n            />\n        );\n    }\n\n    // #endregion -------------------- LIGHTS: FillLight --------------------\n\n\n    // #region -------------------- LIGHTS: RimLight --------------------\n\n    function RimLight({ brightness, color }) {\n        return (\n            <rectAreaLight\n                width={2}\n                height={2}\n                intensity={brightness}\n                color={color}\n                position={[1, 4, -2]}\n                rotation={[0, 180, 0]}\n            />\n        );\n    }\n\n    // #endregion -------------------- LIGHTS: RimLight --------------------\n\n\n    // #region -------------------- LIGHTS: ShadowLight --------------------\n\n    function ShadowLight() {\n        return (\n            <directionalLight\n                castShadow\n                position={[2.5, 0, 5]}\n                intensity={0.05}\n                shadow-mapSize-width={1024}\n                shadow-mapSize-height={1024}\n                shadow-camera-near={0.1}\n                shadow-camera-far={50}\n                shadow-camera-left={-10}\n                shadow-camera-right={10}\n                shadow-camera-top={10}\n                shadow-camera-bottom={-10}\n            />\n        );\n    }\n\n    // #endregion -------------------- LIGHTS: ShadowLight --------------------\n\n    // #endregion ==================== LIGHTS - REF: https://codeworkshop.dev/blog/2019-12-31-learn-the-basics-of-react-three-fiber-by-building-a-three-point-lighting-setup/ ====================\n\n\n    return (\n        <group>\n            <KeyLight brightness={10} color=\"#ccccff\" />\n            <FillLight brightness={10} color=\"#ffffff\" />\n            <RimLight brightness={10} color=\"#eeeeff\" />\n            <ShadowLight />\n        </group>\n    );\n}\n","// #region ==================== IMPORTS ====================\n\nimport React from \"react\";\nimport { useRef } from \"react\";\nimport { useEffect } from \"react\";\n// import { useFrame } from \"react\";\n\nimport { useThree } from \"react-three-fiber\";\n// import { extend } from \"react-three-fiber\";\n\n// import { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n// extend({ OrbitControls });\n\n// #endregion ==================== IMPORTS ====================\n\n\n\n// #region ==================== CAMERA01 - REF: https://github.com/pmndrs/react-three-fiber/blob/master/recipes.md#using-your-own-camera-rig ====================\n\n// function Camera01(props) {\n//     const cameraRef = useRef();\n//     const { setDefaultCamera } = useThree();\n\n//     // Make the camera known to the system\n//     useEffect(() => void setDefaultCamera(\n//         cameraRef.current\n//     // ), []);\n//     ), [setDefaultCamera]);\n\n//     // Update it every frame\n//     // useFrame(() => cameraRef.current.updateMatrixWorld());\n\n\n//     return (\n//         <perspectiveCamera ref={cameraRef} {...props} />\n//     );\n// }\n\n// #endregion ==================== CAMERA01 - REF: https://github.com/pmndrs/react-three-fiber/blob/master/recipes.md#using-your-own-camera-rig ====================\n\n\n// export default function Camera() {\nexport default function Camera(props) {\n    // export default (props) => {\n    // export default () => {\n\n    const cameraRef = useRef();\n    const { setDefaultCamera } = useThree();\n\n    // Make the camera known to the system\n    useEffect(() => void setDefaultCamera(cameraRef.current), [setDefaultCamera]);\n\n    // Update it every frame\n    // useFrame(() => cameraRef.current.updateMatrixWorld());\n\n    return (\n        <perspectiveCamera {...props} ref={cameraRef} />\n    );\n\n\n    // return (\n    //     <Camera01 position={[0, 0, 7.5]} fov={40} />\n    // );\n}\n","// #region ==================== IMPORTS ====================\n\nimport React from \"react\";\n// import ReactDOM from \"react-dom\";\nimport { Suspense } from 'react';\n// import { useRef } from 'react';\n// import { useState } from 'react';\n// import { useEffect } from 'react';\n// import { useFrame } from 'react';\n\nimport { Canvas } from \"react-three-fiber\";\nimport Scene from \"./components/Scene\";\nimport Lights from \"./components/Lights\";\nimport Camera from \"./components/Camera\";\n\nimport * as THREE from 'three';\n\n// import \"./styles.css\";\n\n// #endregion ==================== IMPORTS ====================\n\n\n\nexport default function Home() {\n\n    window.scene = new THREE.Scene();\n    window.THREE = THREE;\n\n\n    return (\n        <Canvas shadowMap>\n            <Suspense fallback={null}>\n                <Lights />\n                {/* <Camera /> */}\n                <Camera position={[0, 0, 7.5]} fov={40} />\n                <Scene />\n            </Suspense>\n        </Canvas>\n    );\n}\n","import React from 'react';\n\nimport Home from './Home';\n\nfunction App() {\n    return (\n        <Home />\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n// import Home from './Home';\n\nimport './styles.css'\n\nReactDOM.render(\n\n    <React.StrictMode>\n        <App />,\n        {/* <Home />, */}\n    </React.StrictMode>,\n\n    // <App />,\n\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}