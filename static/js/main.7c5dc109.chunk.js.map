{"version":3,"sources":["serviceWorker.js","components/Scene.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","extend","Text","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BCHNC,YAAO,CAAEC,W,iBCAMC,MARf,a,MCGAC,IAASC,OACL,kBAAC,EAAD,MAEAC,SAASC,eAAe,SHsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7c5dc109.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//#region ==================== IMPORTS ====================\n\nimport React from \"react\";\n// import { useState } from \"react\";\n// import { useRef } from \"react\";\n\nimport { DoubleSide } from \"three\";\n\n// import Text from './Text';\nimport fonts from \"../fonts/fonts\";\n\nimport { extend } from \"react-three-fiber\";\n\n// import { Canvas3D, Object3DFacade } from 'troika-3d';\nimport { Text } from \"troika-three-text\";\nextend({ Text });\n\n//#endregion ==================== IMPORTS ====================\n\n\nexport default () => {\n\n    //#region ==================== SCENE - REF: https://codeworkshop.dev/blog/2019-12-31-learn-the-basics-of-react-three-fiber-by-building-a-three-point-lighting-setup/ ====================\n\n    //#region -------------------- GROUNDPLANE --------------------\n\n    function GroundPlane() {\n        return (\n            <mesh rotation={[5, 0, 0]} position={[0, -5, 0]} receiveShadow>\n                <planeBufferGeometry attach=\"geometry\" args={[500, 500]} />\n                <meshStandardMaterial attach=\"material\" color=\"white\" side={DoubleSide} metalness={0.4} />\n            </mesh>\n        );\n    }\n\n    //#endregion -------------------- GROUNDPLANE --------------------\n\n\n    //#region -------------------- BACKDROP --------------------\n\n    function BackDrop() {\n\n        return (\n            <mesh position={[0, -1, -5]} receiveShadow>\n                <planeBufferGeometry attach=\"geometry\" args={[500, 500]} />\n                <meshStandardMaterial attach=\"material\" color=\"white\" side={DoubleSide} metalness={0.4} />\n            </mesh>\n        );\n    }\n\n    //#endregion -------------------- BACKDROP --------------------\n\n    //#endregion ==================== SCENE - REF: https://codeworkshop.dev/blog/2019-12-31-learn-the-basics-of-react-three-fiber-by-building-a-three-point-lighting-setup/ ====================\n\n\n\n    //#region ==================== TEXT - REF: https://www.npmjs.com/package/troika-three-text ====================\n    //        ==================== TEXT - REF: https://codesandbox.io/s/troika-3d-text-via-react-three-fiber-forked-1ebyu ====================\n\n    function Hed() {\n\n        const textHed = \"Shigeru McPherson\";\n        const textSubhed = \"digital designer â€¢ art director\";\n\n        // const [rotation, setRotation] = useState([0, 0, 0, 0]);\n\n        // const [genOptions, setOpts] = useState({\n        const genOptions = ({\n            font: fonts[\"Chalet-ParisNineteenSixty\"],\n            // fontSize: 0.75,\n            // color: \"#9999ff\",\n            // maxWidth: 15,\n            maxWidth: window.innerWidth,\n            lineHeight: 1,\n            letterSpacing: 0,\n            textAlign: \"left\",\n            materialType: \"meshPhongMaterial\",\n\n            position: [0, 1.5, -4.25],\n            rotation: [0, 0, 0],\n            anchorX: \"center\",\n            anchorY: \"middle\", \n            // castShadow: true, \n            receiveShadow: true,\n        });\n\n        const hedOptions = ({\n            // font: fonts[\"Chalet-ParisNineteenSixty\"],\n            fontSize: 0.75,\n            color: \"#9999ff\",\n            // maxWidth: 15,\n            // lineHeight: 1,\n            // letterSpacing: 0,\n            // textAlign: \"left\",\n            // materialType: \"meshPhongMaterial\",\n\n            // position: [-6.25, 1.75, -4.25],\n            // position: [-window.innerWidth*0.0025, 1.5, -4.25],\n            // rotation: [0, 0, 0],\n            // anchorX: \"left\",\n            // anchorY: \"middle\"\n        });\n\n        const subhedOptions = ({\n            // font: fonts[\"Chalet-ParisNineteenSixty\"],\n            fontSize: 0.5,\n            color: \"#ff0000\",\n            // maxWidth: 15,\n            // lineHeight: 1,\n            // letterSpacing: 0,\n            // textAlign: \"left\",\n            // materialType: \"meshPhongMaterial\",\n\n            // position: [-6.25, 1, -4.25],\n            // rotation: [0, 0, 0],\n            // anchorX: \"left\",\n            // anchorY: \"middle\"\n        });\n\n        return (\n            <group>\n                <text text={textHed} {...genOptions} {...hedOptions}>\n                    {<meshPhongMaterial attach=\"material\" color={hedOptions.color} />}\n                </text>\n\n                <text text={textSubhed} {...genOptions} {...subhedOptions}>\n                    {<meshPhongMaterial attach=\"material\" color={subhedOptions.color} />}\n                </text>\n            </group>\n        );\n    }\n\n    //#endregion ==================== TEXT - REF: https://www.npmjs.com/package/troika-three-text ====================\n\n\n\n    //#region ==================== REF: https://spectrum.chat/react-three-fiber/general/best-way-to-render-text~8597ed37-45e2-4d9a-998d-7351ad5b08ef ====================\n\n    // function Jumbo() {\n    //     const ref = useRef()\n\n    //     // useFrame(({ clock }) => (ref.current.rotation.x = ref.current.rotation.y = ref.current.rotation.z = Math.sin(clock.getElapsedTime()) * 0.3))\n\n    //     return (\n    //         <group ref={ref}>\n    //             <Text hAlign=\"left\" position={[0, 4.2, 0]} children=\"REACT\" />\n    //             <Text hAlign=\"left\" position={[0, 0, 0]} children=\"THREE\" />\n    //             <Text hAlign=\"left\" position={[0, -4.2, 0]} children=\"FIBER\" />\n    //             <Text hAlign=\"left\" position={[12, 0, 0]} children=\"4\" size={3} />\n    //             <Text hAlign=\"left\" position={[16.5, -4.2, 0]} children=\"X\" />\n    //         </group>\n    //     )\n    // }\n\n    //#endregion ==================== REF: https://spectrum.chat/react-three-fiber/general/best-way-to-render-text~8597ed37-45e2-4d9a-998d-7351ad5b08ef ====================\n\n\n\n    return (\n        <group>\n            <Hed />\n            <BackDrop />\n            <GroundPlane />\n        </group>\n    )\n}\n","import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\nimport Home from './Home';\n// import \"./styles.css\";\n\nfunction App() {\n    return (\n        // <>\n            <Home />\n        // </>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n// import Home from './Home';\n// import './index.css';\nimport './styles.css'\n\nReactDOM.render(\n    <App />,\n    // <Home />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}