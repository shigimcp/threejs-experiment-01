{"version":3,"sources":["serviceWorker.js","components/Scene.jsx","components/Lights.jsx","components/Logo.jsx","components/SingleCube.jsx","components/Cubes.jsx","Home.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","args","attach","color","side","BackSide","metalness","FakeSphere","intensity","position","LogoMesh","props","extrudeSettings","curveSegments","steps","depth","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudeDir","logoMeshRef","useRef","useState","center","setCenter","useEffect","box","THREE","setFromObject","current","sphere","getBoundingSphere","nodeID","x","id","scale","ref","depthWrite","transparent","opacity","fillOpacity","shape","LogoShape","paths","useLoader","SVGLoader","url","shapes","useMemo","flatMap","thisPath","i","toShapes","map","userData","node","logoGroupRef","y","useFrame","rotation","key","uuid","Logo","meshRef","timeRef","isHovered","setIsHovered","isActive","setIsActive","isActiveRef","random","timeModMemo","Math","sin","onHover","useCallback","e","value","stopPropagation","onClick","v","onPointerOver","onPointerOut","roughness","cubeGroup","nodesCubes","Array","el","Home","fallback","Cubes","Lights","Scene","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.031aa8fa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { BackSide } from \"three\";\n\nexport default () => {\n    return (\n        <mesh>\n            <sphereBufferGeometry args={[5, 10, 10]} attach=\"geometry\" />\n            <meshStandardMaterial\n                color={0xffffff}\n                attach=\"material\"\n                side={BackSide}\n                metalness={0.4}\n            />\n        </mesh>\n    );\n};\n","import React from \"react\";\n\nexport default () => {\n    const FakeSphere = () => {\n        return (\n            <mesh>\n                <sphereBufferGeometry args={[10, 30, 30]} attach=\"geometry\" />\n                <meshBasicMaterial color={0x999999} attach=\"material\" />\n            </mesh>\n        );\n    };\n\n    return (\n        <group>\n            <FakeSphere />\n            <ambientLight intensity={0.9} />\n            <pointLight intensity={1.12} position={[0, 0, 0]} />\n        </group>\n    );\n};\n","//#region ==================== IMPORTS ====================\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useRef, useMemo } from 'react';\n\nimport * as THREE from 'three';\nimport { useLoader } from 'react-three-fiber';\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader';\nimport { useFrame } from 'react-three-fiber';\n\n//#endregion ==================== IMPORTS ====================\n\n\n\n//#region ==================== LOGOMESH - REF: https://codesandbox.io/s/react-three-fiber-react-spring-svg-parallax-forked-8hdg1 ====================\n\nfunction LogoMesh(props) {\n\n    //#region -------------------- LOGOMESH: EXTRUDE - REF: https://spectrum.chat/react-three-fiber/general/hole-from-imported-svg-is-reversing-should-be-a-donut-instead-is-a-dot~d235bb19-8d5c-4c4b-af74-faae8484204f --------------------\n    //        -------------------- LOGOMESH: EXTRUDE PARAMETERS - REF: https://threejs.org/docs/#api/en/geometries/ExtrudeGeometry --------------------\n\n    //#region -------------------- LOGOMESH extrudeSettings --------------------\n\n    let extrudeSettings = {\n        curveSegments: 7, \n        steps: 2, \n        depth: 15, \n        bevelEnabled: true, \n        bevelThickness: 10,\n        bevelSize: 10, \n        bevelOffset: 0, \n        bevelSegments: 10, \n    };\n\n    if (props.extrudeDir === 'negative') {\n        extrudeSettings.depth = extrudeSettings.depth * -1;\n    }\n\n    //#endregion -------------------- LOGOMESH extrudeSettings --------------------\n\n\n\n    //#region -------------------- LOGOMESH center --------------------\n\n    const logoMeshRef = useRef()\n    const [center, setCenter] = useState([0, 0, 0])\n\n    \n    useEffect(() => {\n        const box = new THREE.Box3().setFromObject(logoMeshRef.current)\n        const sphere = new THREE.Sphere()\n        box.getBoundingSphere(sphere)\n\n\n        //#region - - - - - - - - - - - LOGOMESH center: via props.nodeID (see LogoShape below) - - - - - - - - - - -\n\n        switch (props.nodeID) {\n            // case 'afro':\n\n            //     console.log('')\n            //     console.log('- - - - - - - - - - - LOGOMESH center: switch (props.nodeID) ' + props.nodeID + ' - - - - - - - - - - -');\n            //     console.log(logoMeshRef.current.material.color)\n            //     console.log(logoMeshRef.current)\n            //     console.log('props.nodeID = ' + props.nodeID)\n\n            //     setCenter([-sphere.center.x, 0, 0])\n\n            //     console.log('center = ' + center)\n\n            //     break;\n\n            // case 'glassesID':\n\n            //     console.log('')\n            //     console.log('- - - - - - - - - - - LOGOMESH center: switch (props.nodeID) ' + props.nodeID + ' - - - - - - - - - - -');\n            //     console.log(logoMeshRef.current.material.color)\n            //     console.log(logoMeshRef.current)\n            //     console.log('props.nodeID = ' + props.nodeID)\n\n            //     setCenter([-sphere.center.x, 0, 0])\n\n            //     console.log('center = ' + center)\n\n            //     break;\n\n            case 'kanji_ko01ID':\n\n                // console.log('')\n                // console.log('- - - - - - - - - - - LOGOMESH center: switch (props.nodeID) ' + props.nodeID + ' - - - - - - - - - - -');\n                // console.log(logoMeshRef.current.material.color)\n                // console.log(logoMeshRef.current)\n                // console.log('props.nodeID = ' + props.nodeID)\n\n                setCenter([-sphere.center.x * 0.809716599190283, 0, 0])\n\n                break;\n\n            case 'kanji_ko02ID':\n\n                // console.log('')\n                // console.log('- - - - - - - - - - - LOGOMESH center: switch (props.nodeID) ' + props.nodeID + ' - - - - - - - - - - -');\n                // console.log(logoMeshRef.current.material.color)\n                // console.log(logoMeshRef.current)\n                // console.log('props.nodeID = ' + props.nodeID)\n\n                setCenter([-sphere.center.x * 0.798522414124903, 0, 0])\n\n                break;\n\n            default:\n\n                // console.log('')\n                // console.log('- - - - - - - - - - - LOGOMESH center: switch (props.nodeID) ' + props.nodeID + ' - - - - - - - - - - -');\n                // console.log(logoMeshRef.current.material.color)\n                // console.log(logoMeshRef.current)\n                // console.log('props.nodeID = ' + props.nodeID)\n\n                setCenter([-sphere.center.x, 0, 0])\n\n                break;\n        }\n\n        //#endregion - - - - - - - - - - - LOGOMESH center: via props.nodeID (see LogoShape below) - - - - - - - - - - -\n\n    }, [props.nodeID])\n\n    //#endregion -------------------- LOGOMESH center --------------------\n\n    //#endregion -------------------- LOGOMESH: EXTRUDE - REF: https://spectrum.chat/react-three-fiber/general/hole-from-imported-svg-is-reversing-should-be-a-donut-instead-is-a-dot~d235bb19-8d5c-4c4b-af74-faae8484204f --------------------\n\n    const meshColor = [0, 0, 0];\n\n    return (\n        <mesh id={props.id} scale={[0.005, -0.005, 0.005]} position={center} ref={logoMeshRef}>\n            <meshStandardMaterial attach=\"material\" color={meshColor} side={THREE.DoubleSide} depthWrite={true} transparent opacity={props.fillOpacity} />\n            <extrudeBufferGeometry attach=\"geometry\" args={[[props.shape], extrudeSettings]} />\n        </mesh>\n    )\n}\n\n//#endregion ==================== LOGOMESH - REF: https://codesandbox.io/s/react-three-fiber-react-spring-svg-parallax-forked-8hdg1 ====================\n\n\n\n//#region ==================== LOGOSHAPE - REF: https://spectrum.chat/react-three-fiber/general/hole-from-imported-svg-is-reversing-should-be-a-donut-instead-is-a-dot~d235bb19-8d5c-4c4b-af74-faae8484204f ====================\n\nfunction LogoShape(props) {\n\n    //#region -------------------- LOGOSHAPE shapes --------------------\n\n    const { paths } = useLoader(SVGLoader, props.url)\n\n    const shapes = useMemo(() => \n        paths.flatMap((thisPath, i) => \n            thisPath.toShapes(true).map((shape) => \n                ({ shape, color: thisPath.color, fillOpacity: props.fillOpacity, extrudeDir: props.extrudeDir, nodeID: thisPath.userData.node.id })\n            )\n        ), [paths, props]\n    )\n\n    //#endregion -------------------- LOGOSHAPE shapes --------------------\n\n\n\n    //#region -------------------- LOGOSHAPE center --------------------\n\n    const [center, setCenter] = useState([0, 0, 0])\n\n    const logoGroupRef = useRef()\n\n    useEffect(() => {\n        const box = new THREE.Box3().setFromObject(logoGroupRef.current)\n        const sphere = new THREE.Sphere()\n        box.getBoundingSphere(sphere)\n        setCenter([0, -sphere.center.y, 0])\n    }, [])\n\n    //#endregion -------------------- LOGOSHAPE center --------------------\n\n\n\n    //#region -------------------- LOGOSHAPE spin --------------------\n\n    useFrame(() => {\n        logoGroupRef.current.rotation.y += 0.025;\n    });\n\n    //#endregion -------------------- LOGOSHAPE spin --------------------\n\n\n    return (\n        <group position={center} ref={logoGroupRef}>\n            {shapes.map((props) => (\n                <LogoMesh key={props.shape.uuid} {...props} />\n            ))}\n        </group>\n    )\n}\n\n//#endregion ==================== LOGOSHAPE - REF: https://spectrum.chat/react-three-fiber/general/hole-from-imported-svg-is-reversing-should-be-a-donut-instead-is-a-dot~d235bb19-8d5c-4c4b-af74-faae8484204f ====================\n\n\n\nexport default function Logo() {\n    return (\n        <>\n            <LogoShape url=\"https://raw.githubusercontent.com/shigimcp/threejs-experiment-01/main/src/.github/images/logo/shigeru_logo_extrude_clean.svg\" fillOpacity=\"0.5\" extrudeDir=\"positive\" />\n            <LogoShape url=\"https://raw.githubusercontent.com/shigimcp/threejs-experiment-01/main/src/.github/images/logo/shigeru_logo_extrude_clean.svg\" fillOpacity=\"0.5\" extrudeDir=\"negative\" />\n        </>\n    )\n}\n","import React, {\n    useMemo,\n    useRef,\n    useState,\n    useEffect,\n    useCallback\n} from \"react\";\nimport { random } from \"lodash\";\nimport { useFrame } from \"react-three-fiber\";\n\nexport default () => {\n    const meshRef = useRef();\n    const timeRef = useRef(0);\n\n    const [isHovered, setIsHovered] = useState(false);\n    const [isActive, setIsActive] = useState(false);\n\n    const isActiveRef = useRef(isActive);\n\n    // position\n\n    const orbitRadius = 3;\n\n    const position = useMemo(() => {\n        // return [random(-3, 3, true), random(-3, 3, true), random(-3, 3, true)];\n        // return [random(-1.5, 1.5, true), random(-1.5, 1.5, true), random(-1.5, 1.5, true)];\n        // return [random(-orbitRadius, orbitRadius, true), random(-orbitRadius, orbitRadius, true), random(-orbitRadius, orbitRadius, true)];\n        return [random(-orbitRadius, orbitRadius, true), 0, random(-orbitRadius, orbitRadius, true)];\n    }, []);\n\n    // random time mod factor\n    const timeModMemo = useMemo(() => random(0.1, 4, true), []);\n\n    // color\n    // const color = isHovered ? 0xe5d54d : (isActive ? 0xf7e7e5 : 0xf95b3c);\n    const color = isHovered ? 0x666666 : (isActive ? 0x000000 : 0xdddddd);\n\n    //useEffect of the activeState\n    useEffect(() => {\n        isActiveRef.current = isActive;\n    }, [isActive]);\n\n    // raf loop\n    useFrame(() => {\n        meshRef.current.rotation.y += 0.01 * timeModMemo;\n        if (isActiveRef.current) {\n            timeRef.current += 0.03;\n            meshRef.current.position.y = position[1] + Math.sin(timeRef.current) * 0.4;\n        }\n    });\n\n    // Events\n    const onHover = useCallback(\n        (e, value) => {\n            e.stopPropagation();\n            setIsHovered(value);\n        },\n        [setIsHovered]\n    );\n\n    const onClick = useCallback(\n        e => {\n            e.stopPropagation();\n            setIsActive(v => !v);\n        },\n        [setIsActive]\n    );\n\n    return (\n        <mesh\n            ref={meshRef}\n            position={position}\n            onClick={e => onClick(e)}\n            onPointerOver={e => onHover(e, true)}\n            onPointerOut={e => onHover(e, false)}\n        >\n            <boxBufferGeometry attach=\"geometry\" args={[0.005, 0.75, 1]} />\n            <meshStandardMaterial\n                attach=\"material\"\n                color={color}\n                roughness={0.6}\n                metalness={0.1}\n            />\n        </mesh>\n    );\n};","import React, { useRef } from \"react\";\nimport { map } from \"lodash\";\nimport { useFrame } from \"react-three-fiber\";\n\nimport Cube from \"./SingleCube\";\n\nexport default () => {\n    const cubeGroup = useRef();\n\n    useFrame(() => {\n        cubeGroup.current.rotation.y += 0.005;\n    });\n\n    const nodesCubes = map(new Array(5), (el, i) => {\n        return <Cube key={i} />;\n    });\n\n    return <group ref={cubeGroup}>{nodesCubes}</group>;\n};\n","import React from \"react\";\n// import ReactDOM from \"react-dom\";\nimport { Suspense } from 'react';\n\nimport { Canvas } from \"react-three-fiber\";\nimport Scene from \"./components/Scene\";\nimport Lights from \"./components/Lights\";\n\nimport Logo from \"./components/Logo\";\nimport Cubes from \"./components/Cubes\";\n\n// import \"./styles.css\";\n\nexport default function Home() {\n    return (\n        <>\n            <Canvas>\n                <Suspense fallback={null}>\n                    <Logo />\n                    <Cubes />\n                    <Lights />\n                    <Scene />\n                </Suspense>\n            </Canvas>\n        </>\n    );\n}\n","import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\nimport Home from './Home';\n// import \"./styles.css\";\n\nfunction App() {\n    return (\n        <>\n            <Home />\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n// import './index.css';\nimport './styles.css'\n\nReactDOM.render(\n        <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}