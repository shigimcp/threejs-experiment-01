{"version":3,"sources":["serviceWorker.js","components/SingleCube.jsx","components/Cubes.jsx","components/Lights.jsx","components/Scene.jsx","components/Logo.jsx","Home.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","meshRef","useRef","timeRef","useState","isHovered","setIsHovered","isActive","setIsActive","isActiveRef","position","useMemo","random","timeModMemo","color","useEffect","current","useFrame","rotation","y","Math","sin","onHover","useCallback","e","value","stopPropagation","onClick","v","ref","onPointerOver","onPointerOut","attach","args","roughness","metalness","cubeGroup","nodesCubes","map","Array","el","i","key","FakeSphere","intensity","side","BackSide","LogoMesh","zPos","shape","fillOpacity","console","log","scale","THREE","opacity","depthWrite","curveSegments","steps","depth","bevelEnabled","LogoShape","url","paths","useLoader","SVGLoader","shapes","flatMap","thisPath","toShapes","userData","style","logoGroupRef","props","uuid","Logo","Home","fallback","Cubes","Lights","Scene","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0c02bef0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {\n    useMemo,\n    useRef,\n    useState,\n    useEffect,\n    useCallback\n} from \"react\";\nimport { random } from \"lodash\";\nimport { useFrame } from \"react-three-fiber\";\n\nexport default () => {\n    const meshRef = useRef();\n    const timeRef = useRef(0);\n\n    const [isHovered, setIsHovered] = useState(false);\n    const [isActive, setIsActive] = useState(false);\n\n    const isActiveRef = useRef(isActive);\n\n    // position\n    const position = useMemo(() => {\n        // return [random(-3, 3, true), random(-3, 3, true), random(-3, 3, true)];\n        return [random(-1.5, 1.5, true), random(-1.5, 1.5, true), random(-1.5, 1.5, true)];\n    }, []);\n\n    // random time mod factor\n    const timeModMemo = useMemo(() => random(0.1, 4, true), []);\n\n    // color\n    // const color = isHovered ? 0xe5d54d : (isActive ? 0xf7e7e5 : 0xf95b3c);\n    const color = isHovered ? 0x666666 : (isActive ? 0x000000 : 0xdddddd);\n\n    //useEffect of the activeState\n    useEffect(() => {\n        isActiveRef.current = isActive;\n    }, [isActive]);\n\n    // raf loop\n    useFrame(() => {\n        meshRef.current.rotation.y += 0.01 * timeModMemo;\n        if (isActiveRef.current) {\n            timeRef.current += 0.03;\n            meshRef.current.position.y = position[1] + Math.sin(timeRef.current) * 0.4;\n        }\n    });\n\n    // Events\n    const onHover = useCallback(\n        (e, value) => {\n            e.stopPropagation();\n            setIsHovered(value);\n        },\n        [setIsHovered]\n    );\n\n    const onClick = useCallback(\n        e => {\n            e.stopPropagation();\n            setIsActive(v => !v);\n        },\n        [setIsActive]\n    );\n\n    return (\n        <mesh\n            ref={meshRef}\n            position={position}\n            onClick={e => onClick(e)}\n            onPointerOver={e => onHover(e, true)}\n            onPointerOut={e => onHover(e, false)}\n        >\n            <boxBufferGeometry attach=\"geometry\" args={[0.005, 0.75, 1]} />\n            <meshStandardMaterial\n                attach=\"material\"\n                color={color}\n                roughness={0.6}\n                metalness={0.1}\n            />\n        </mesh>\n    );\n};","import React, { useRef } from \"react\";\nimport { map } from \"lodash\";\nimport { useFrame } from \"react-three-fiber\";\n\nimport Cube from \"./SingleCube\";\n\nexport default () => {\n    const cubeGroup = useRef();\n\n    useFrame(() => {\n        cubeGroup.current.rotation.y += 0.005;\n    });\n\n    const nodesCubes = map(new Array(5), (el, i) => {\n        return <Cube key={i} />;\n    });\n\n    return <group ref={cubeGroup}>{nodesCubes}</group>;\n};\n","import React from \"react\";\n\nexport default () => {\n    const FakeSphere = () => {\n        return (\n            <mesh>\n                <sphereBufferGeometry args={[10, 30, 30]} attach=\"geometry\" />\n                <meshBasicMaterial color={0x999999} attach=\"material\" />\n            </mesh>\n        );\n    };\n\n    return (\n        <group>\n            <FakeSphere />\n            <ambientLight intensity={0.9} />\n            <pointLight intensity={1.12} position={[0, 0, 0]} />\n        </group>\n    );\n};\n","import React from \"react\";\nimport { BackSide } from \"three\";\n\nexport default () => {\n    return (\n        <mesh>\n            <sphereBufferGeometry args={[5, 10, 10]} attach=\"geometry\" />\n            <meshStandardMaterial\n                color={0xffffff}\n                attach=\"material\"\n                side={BackSide}\n                metalness={0.4}\n            />\n        </mesh>\n    );\n};\n","//#region ==================== IMPORTS ====================\n\n// REF: https://codesandbox.io/s/react-three-fiber-react-spring-svg-parallax-forked-8hdg1\n\nimport React from 'react';\nimport { useRef, useMemo } from 'react';\n\nimport * as THREE from 'three';\nimport { useLoader } from 'react-three-fiber';\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader';\nimport { useFrame } from 'react-three-fiber';\n// import { MapControls } from 'three/examples/jsm/controls/OrbitControls';\n\n// extend({ MapControls });\n\n//#endregion ==================== IMPORTS ====================\n\n\n\n//#region ==================== CONTROLS - REF: https://codesandbox.io/s/react-three-fiber-react-spring-svg-parallax-forked-8hdg1 ====================\n\n// function Controls() {\n//     const controls = useRef();\n//     const { camera, gl } = useThree();\n\n//     useFrame(() => controls.current.update());\n\n//     return (\n//         <mapControls ref={controls} args={[camera, gl.domElement]} enableDamping dampingFactor={0.1} maxZoom={40} minZoom={1.25} />\n//     )\n// }\n\n//#endregion ==================== CONTROLS - REF: https://codesandbox.io/s/react-three-fiber-react-spring-svg-parallax-forked-8hdg1 ====================\n\n\n\n//#region ==================== LOGOMESH - REF: https://codesandbox.io/s/react-three-fiber-react-spring-svg-parallax-forked-8hdg1 ====================\n\nfunction LogoMesh({ color, shape, fillOpacity }) {\n\n    //#region -------------------- REF: https://codesandbox.io/s/react-three-fiber-react-spring-svg-parallax-forked-8hdg1 --------------------\n\n    // return (\n    //     <mesh scale={[0.005, -0.005, 0.005]} position={[-2.5, 0, 0]}>\n    //         <meshBasicMaterial attach=\"material\" color={color} opacity={fillOpacity} depthWrite={false} transparent />\n    //         <shapeBufferGeometry attach=\"geometry\" args={[shape]} />\n    //     </mesh>\n    // )\n\n    //#endregion -------------------- REF: https://codesandbox.io/s/react-three-fiber-react-spring-svg-parallax-forked-8hdg1 --------------------\n\n\n    //#region -------------------- EXTRUDE - REF: https://spectrum.chat/react-three-fiber/general/hole-from-imported-svg-is-reversing-should-be-a-donut-instead-is-a-dot~d235bb19-8d5c-4c4b-af74-faae8484204f --------------------\n    //        -------------------- PARAMETERS - REF: https://threejs.org/docs/#api/en/geometries/ExtrudeGeometry --------------------\n\n    var zPos;\n\n    var extrudeSettings = {\n        curveSegments: 3, \n        steps: 2, \n        depth: 50, \n        bevelEnabled: false, \n        // bevelThickness: 30, \n        // bevelSize: 10, \n        // bevelOffset: 0, \n        // bevelSegments: 20, \n        // extrudePath: [some THREE.Curve], \n        // UVGenerator: [some Oject]\n    };\n\n\n    // Checks if black or white. Should be made more dynamic ultimately.\n\n    // if (color.r !== 1) {\n    if (color !== 1) {\n    // if (color === 1) {\n\n        console.log('');\n        // console.log('color = ' + color);\n        console.log('color === 1 ' + color);\n        console.log(color);\n        // console.log('fillOpacity = ' + fillOpacity);\n\n        // zPos = 1;\n        zPos = 0;\n\n    } else {\n\n        console.log('');\n        // console.log('color = ' + color);\n        console.log('color !== 1 ' + color);\n        console.log(color);\n        // console.log('fillOpacity = ' + fillOpacity);\n\n\n        zPos = 0;\n        // zPos = -1;\n        // thisBlend = THREE.SubtractiveBlending;\n        // thisCull = THREE.CullFaceNone;\n    }\n\n\n    return (\n        <mesh scale={[0.005, -0.005, 0.005]} position={[-2.5, 0, zPos]}>\n            <meshPhongMaterial attach=\"material\" color={color} side={THREE.DoubleSide} opacity={fillOpacity} depthWrite={true} />\n            <extrudeBufferGeometry attach=\"geometry\" args={[[shape], extrudeSettings]} />\n        </mesh>\n    )\n\n    //#endregion -------------------- EXTRUDE - REF: https://spectrum.chat/react-three-fiber/general/hole-from-imported-svg-is-reversing-should-be-a-donut-instead-is-a-dot~d235bb19-8d5c-4c4b-af74-faae8484204f --------------------\n}\n\n//#endregion ==================== LOGOMESH - REF: https://codesandbox.io/s/react-three-fiber-react-spring-svg-parallax-forked-8hdg1 ====================\n\n\n\n//#region ==================== LOGOSHAPE - REF: https://codesandbox.io/s/react-three-fiber-react-spring-svg-parallax-forked-8hdg1 ====================\n\nfunction LogoShape({ url }) {\n// function LogoShape({ url, depthNum, color, shape, fillOpacity, strokeColor }) {\n\n    const { paths } = useLoader(SVGLoader, url)\n\n    const shapes = useMemo(() => \n        paths.flatMap((thisPath, i) => \n            thisPath.toShapes(true).map((shape) => \n                ({ shape, color: thisPath.color, fillOpacity: thisPath.userData.style.fillOpacity })\n            )\n        ), [paths]\n    )\n\n    // const [center, setCenter] = useState([0, 0, 0])\n    const center = [0, 2.5, 0]\n\n    const logoGroupRef = useRef()\n\n\n    //#region -------------------- REF: https://codesandbox.io/s/react-three-fiber-react-spring-svg-parallax-forked-8hdg1 --------------------\n\n    // useEffect(() => {\n    //     const box = new Box3().setFromObject(logoGroupRef.current)\n    //     const sphere = new Sphere()\n    //     box.getBoundingSphere(sphere)\n    //     setCenter([-sphere.center.x, -sphere.center.y, 0])\n    // }, [])\n\n    useFrame(() => {\n        logoGroupRef.current.rotation.y += 0.025;\n    });\n\n    return (\n        <group position={center} ref={logoGroupRef}>\n            {shapes.map((props) => (\n                <LogoMesh key={props.shape.uuid} {...props} />\n            ))}\n        </group>\n    )\n\n    //#endregion -------------------- REF: https://codesandbox.io/s/react-three-fiber-react-spring-svg-parallax-forked-8hdg1 --------------------\n}\n\n//#endregion ==================== LOGOSHAPE - REF: https://codesandbox.io/s/react-three-fiber-react-spring-svg-parallax-forked-8hdg1 ====================\n\n\n\n// export default () => {\nexport default function Logo() {\n    return (\n        <>\n            <LogoShape url=\"https://raw.githubusercontent.com/shigimcp/threejs-experiment-01/main/src/.github/images/logo/shigeru_logo_transparent.svg\" />\n        </>\n    )\n}\n","import React from \"react\";\n// import ReactDOM from \"react-dom\";\nimport { Suspense } from 'react';\n\n// import Credits from \"./components/Credits\"\nimport { Canvas } from \"react-three-fiber\";\nimport Cubes from \"./components/Cubes\";\nimport Lights from \"./components/Lights\";\nimport Scene from \"./components/Scene\";\n\nimport Logo from \"./components/Logo\";\n\n// import \"./styles.css\";\n\nexport default function Home() {\n    return (\n        <>\n            <Canvas>\n                <Suspense fallback={null}>\n                    <Logo />\n                    <Cubes />\n                    <Lights />\n                    <Scene />\n                </Suspense>\n            </Canvas>\n        </>\n    );\n}\n","import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\nimport Home from './Home';\n// import \"./styles.css\";\n\nfunction App() {\n    return (\n        <>\n            <Home />\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n// import './index.css';\nimport './styles.css'\n\nReactDOM.render(\n        <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}